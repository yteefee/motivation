from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from keyboards import get_admin_keyboard
from utils.states import AdminStates  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from database.db import Database
from config import config

router = Router()

@router.message(F.text == "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
        
    await message.answer(
        "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    if message.from_user.id != config.ADMIN_ID:
        return
        
    with Database(config.DB_NAME) as db:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.cursor.execute("SELECT COUNT(*) FROM users")
        users_count = db.cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏—Ç–∞—Ç
        db.cursor.execute("SELECT COUNT(*) FROM quotes")
        quotes_count = db.cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
        db.cursor.execute("SELECT COUNT(*) FROM tips")
        tips_count = db.cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        db.cursor.execute("SELECT COUNT(*) FROM challenges")
        challenges_count = db.cursor.fetchone()[0]
        
        db.cursor.execute("""
            SELECT COUNT(*) FROM user_challenges WHERE completed=1
        """)
        completed_challenges = db.cursor.fetchone()[0]
    
    stats_message = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üí¨ –¶–∏—Ç–∞—Ç: {quotes_count}\n"
        f"üí° –°–æ–≤–µ—Ç–æ–≤: {tips_count}\n"
        f"üèÜ –ß–µ–ª–ª–µ–Ω–¥–∂–µ–π: {challenges_count}\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: {completed_challenges}"
    )
    
    await message.answer(stats_message)

@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
async def add_quote_start(message: Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
        
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É:")
    await state.set_state(AdminStates.add_quote)

@router.message(AdminStates.add_quote)
async def add_quote_finish(message: Message, state: FSMContext):
    with Database(config.DB_NAME) as db:
        db.cursor.execute(
            "INSERT INTO quotes (quote_text) VALUES (?)",
            (message.text,)
        )
        db.conn.commit()
    
    await message.answer("–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç")
async def add_tip_start(message: Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        return
        
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–≤–µ—Ç:")
    await state.set_state(AdminStates.add_tip)

@router.message(AdminStates.add_tip)
async def add_tip_finish(message: Message, state: FSMContext):
    with Database(config.DB_NAME) as db:
        db.cursor.execute(
            "INSERT INTO tips (tip_text) VALUES (?)",
            (message.text,)
        )
        db.conn.commit()
    
    await message.answer("–°–æ–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

@router.message(F.text == "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main(message: Message):
    from keyboards.user import get_main_keyboard
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )