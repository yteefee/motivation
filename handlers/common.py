from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from keyboards.user import get_main_keyboard
from database.db import Database
from config import config
from datetime import datetime
import random
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from keyboards.user import get_main_keyboard
from config import config

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    with Database(config.DB_NAME) as db:
        db.cursor.execute(
            'INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
            (message.from_user.id, message.from_user.username, message.from_user.first_name)
        )
        db.conn.commit()
    
    keyboard = get_main_keyboard()
    if message.from_user.id == config.ADMIN_ID:
        keyboard.keyboard.append(["üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!",
        reply_markup=keyboard
    )


@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        with Database(config.DB_NAME) as db:
            db.cursor.execute(
                'INSERT OR IGNORE INTO users (user_id, username, first_name, registration_date) VALUES (?, ?, ?, ?)',
                (
                    message.from_user.id,
                    message.from_user.username,
                    message.from_user.first_name,
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                )
            )
            db.conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_main_keyboard()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏
    if message.from_user.id == config.ADMIN_ID:
        keyboard.keyboard.append(["üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
async def send_quote(message: Message):
    try:
        with Database(config.DB_NAME) as db:
            print("–ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É –∏–∑ –±–∞–∑—ã...")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            db.cursor.execute('SELECT quote_text, author FROM quotes')
            all_quotes = db.cursor.fetchall()
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ü–∏—Ç–∞—Ç: {len(all_quotes)}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            if not all_quotes:
                await message.answer("–ë–∞–∑–∞ —Ü–∏—Ç–∞—Ç –ø—É—Å—Ç–∞")
                return
                
            quote = random.choice(all_quotes)
            response = f'"{quote[0]}"'
            if quote[1]:
                response += f'\n‚Äî {quote[1]}'
                
            await message.answer(response)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã")

@router.message(F.text == "üí° –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç")
async def send_tip(message: Message):
    try:
        with Database(config.DB_NAME) as db:
            db.cursor.execute('''
                SELECT tip_text, category FROM tips 
                ORDER BY RANDOM() LIMIT 1
            ''')
            tip = db.cursor.fetchone()
            
            if not tip:
                await message.answer("–°–æ–≤–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            response = tip[0]
            if tip[1]:
                response += f"\n\nüîπ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tip[1]}"
                
            await message.answer(response)
            
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞")
        print(f"–û—à–∏–±–∫–∞ –≤ send_tip: {e}")